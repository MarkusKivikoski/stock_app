{"remainingRequest":"C:\\Users\\Markus\\technical-analysis\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Markus\\technical-analysis\\src\\components\\Chart.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\Markus\\technical-analysis\\src\\components\\Chart.vue","mtime":1557498936949},{"path":"C:\\Users\\Markus\\technical-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Markus\\technical-analysis\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Markus\\technical-analysis\\node_modules\\ts-loader\\index.js","mtime":1543302582000},{"path":"C:\\Users\\Markus\\technical-analysis\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1543737895000},{"path":"C:\\Users\\Markus\\technical-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Markus\\technical-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport LineChart from '@/components/LineChart.js';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    LineChart,\r\n  },\r\n\r\n  props: {\r\n    index: Number,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      datacollection: null,\r\n      type: 'DATA',\r\n      symbol: this.$store.state.symbols[this.index],\r\n      name: this.$store.state.names[this.index],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fillStockData();\r\n  },\r\n  methods: {\r\n    setData(thenumbers: number[], thelabels: string[], headline: string): void {\r\n      this.datacollection = {\r\n        labels: thelabels,\r\n        datasets: [\r\n          {\r\n            label: headline,\r\n            backgroundColor: '#f17119',\r\n            borderColor: '#f17119',\r\n            data: thenumbers,\r\n            fill: false,\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.type=headline\r\n    },\r\n    fillRandomData(): void {\r\n      this.type = 'RANDOM';\r\n      const dump = this.getRandomIntArray(30);\r\n      this.setData(dump, dump.map(p => String(p)), this.symbol);\r\n    },\r\n    getRandomInt() {\r\n      return Math.floor(Math.random() * (50 - 5 + 1)) + 5;\r\n    },\r\n    getRandomIntArray(n: number): number[] {\r\n      const arr = [];\r\n      for (let i = 0; i < n; i++) {\r\n        arr.push(this.getRandomInt());\r\n      }\r\n      return arr;\r\n    },\r\n    fillStockData(): void {\r\n      this.type = 'STOCK';\r\n      const fetcher = axios({\r\n        method: 'get',\r\n        url: 'https://www.alphavantage.co/query',\r\n        params: {\r\n          function: 'TIME_SERIES_INTRADAY',\r\n          symbol: this.symbol,\r\n          interval: '60min',\r\n          apikey: 'HX7K9KL65T31O9FH',\r\n        },\r\n      }).then((res) => {\r\n        const root = res.data['Time Series (60min)'];\r\n        const prices = Object.keys(root).map((key, index) => {\r\n          return Number(root[key]['1. open']);\r\n        });\r\n        this.setData(prices, Object.keys(root).map(str => str.substr(0, 11)), this.name);\r\n      }).catch((e) => {\r\n        return e;\r\n      });\r\n      this.fillRandomData();\r\n    },\r\n  },\r\n};\r\n",{"version":3,"sources":["Chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chart.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n  <v-flex xs6>\r\n    <v-card>\r\n      <line-chart :chart-data=\"datacollection\"></line-chart>\r\n      <div>\r\n        <v-card-title primary-title>\r\n          <div>\r\n            <h3 class=\"headline mb-0\">{{ type }}</h3>\r\n            \r\n          </div>\r\n        </v-card-title>\r\n        <v-card-actions>\r\n          <v-btn @click=\"fillStockData()\" flat color=\"orange\">Refresh</v-btn>\r\n        </v-card-actions>\r\n      </div>\r\n    </v-card>\r\n  </v-flex>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport LineChart from '@/components/LineChart.js';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  components: {\r\n    LineChart,\r\n  },\r\n\r\n  props: {\r\n    index: Number,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      datacollection: null,\r\n      type: 'DATA',\r\n      symbol: this.$store.state.symbols[this.index],\r\n      name: this.$store.state.names[this.index],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fillStockData();\r\n  },\r\n  methods: {\r\n    setData(thenumbers: number[], thelabels: string[], headline: string): void {\r\n      this.datacollection = {\r\n        labels: thelabels,\r\n        datasets: [\r\n          {\r\n            label: headline,\r\n            backgroundColor: '#f17119',\r\n            borderColor: '#f17119',\r\n            data: thenumbers,\r\n            fill: false,\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.type=headline\r\n    },\r\n    fillRandomData(): void {\r\n      this.type = 'RANDOM';\r\n      const dump = this.getRandomIntArray(30);\r\n      this.setData(dump, dump.map(p => String(p)), this.symbol);\r\n    },\r\n    getRandomInt() {\r\n      return Math.floor(Math.random() * (50 - 5 + 1)) + 5;\r\n    },\r\n    getRandomIntArray(n: number): number[] {\r\n      const arr = [];\r\n      for (let i = 0; i < n; i++) {\r\n        arr.push(this.getRandomInt());\r\n      }\r\n      return arr;\r\n    },\r\n    fillStockData(): void {\r\n      this.type = 'STOCK';\r\n      const fetcher = axios({\r\n        method: 'get',\r\n        url: 'https://www.alphavantage.co/query',\r\n        params: {\r\n          function: 'TIME_SERIES_INTRADAY',\r\n          symbol: this.symbol,\r\n          interval: '60min',\r\n          apikey: 'HX7K9KL65T31O9FH',\r\n        },\r\n      }).then((res) => {\r\n        const root = res.data['Time Series (60min)'];\r\n        const prices = Object.keys(root).map((key, index) => {\r\n          return Number(root[key]['1. open']);\r\n        });\r\n        this.setData(prices, Object.keys(root).map(str => str.substr(0, 11)), this.name);\r\n      }).catch((e) => {\r\n        return e;\r\n      });\r\n      this.fillRandomData();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n  .small {\r\n    max-width: 600px;\r\n    margin:  150px auto;\r\n  }\r\n</style>\r\n"]}]}